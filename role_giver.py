import discord

# Role ID pro Townhall levely
TOWNHALL_ROLES = {
    17: 1365984171054469180,
    16: 1365984303535620148,
    15: 1365984329603354725,
    14: 1365984372406226994,
    13: 1365985135463370854,
    12: 1365984488185659423,
    11: 1365984518942621806,
}

# Role ID pro Ligy
LEAGUE_ROLES = {
    "Legend League": 1365984556187914292,
    "Titan League": 1365984696378589214,
    "Champion League": 1365984718004420730,
    "Master League": 1365984761918652446,
    "Crystal League": 1365984789399605368,
    "Gold League": 1365984815932772402,
    "Silver League": 1365984834865991720,
    "Bronze League": 1365984854746861638,
    "Unranked": 1365984879405436978,
}

# Spr√°va Leader/CoLeader/Admin (Elder) rol√≠
clan_role_mappings = {
    "leader": 1366106894816510062,
    "coLeader": 1366106931042975845,
    "admin": 1366106980732633118  # Admin = Elder v datab√°zi
}

async def update_roles(guild: discord.Guild, user_mapping: dict, clan_members: list[dict]):
    """
    Aktualizuje role hr√°ƒç≈Øm podle dat z datab√°ze:
    - P≈ôid√°v√°/odeb√≠r√° Town Hall role
    - P≈ôid√°v√°/odeb√≠r√° League role
    - Spravuje individu√°ln√≠ trofejovou roli
    - P≈ôid√°v√° ovƒõ≈ôenou roli pokud chyb√≠
    """

    verified_role = guild.get_role(1365768439473373235)  # ID role "Ovƒõ≈ôen√Ω ƒçlen klanu"
    if not verified_role:
        print(f"‚ùå [RoleGiver] Role 'Ovƒõ≈ôen√Ω ƒçlen klanu' s ID 1365768439473373235 nebyla nalezena.")
        return

    for discord_id, (coc_tag, _) in user_mapping.items():
        member = guild.get_member(int(discord_id))
        if not member:
            print(f"‚ùå [RoleGiver] U≈æivatel s ID {discord_id} nebyl nalezen.")
            continue

        player_data = next((p for p in clan_members if p['tag'] == coc_tag), None)
        if not player_data:
            print(f"‚ùå [RoleGiver] Clash hr√°ƒç s tagem {coc_tag} nebyl nalezen v seznamu.")
            continue

        townhall_level = player_data.get('townHallLevel')
        league_name = player_data.get('league', "Unranked")
        trophies = player_data.get('trophies')

        player_clan_role = player_data.get("role", "").lower()

        # üëë === Spr√°va clan rol√≠ (Leader / CoLeader / Elder(Admin)) ===
        # Vyber spr√°vnou roli podle aktu√°ln√≠ role v klanu
        if player_clan_role == "leader":
            current_role_id = 1366106894816510062
        elif player_clan_role == "coleader":
            current_role_id = 1366106931042975845
        elif player_clan_role == "admin":
            current_role_id = 1366106980732633118
        else:
            current_role_id = None  # Pokud je nƒõco jin√©ho (t≈ôeba "member"), tak nic nedƒõlat

        # Pokud m√°me urƒçeno, jak√° role m√° b√Ωt
        if current_role_id:
            desired_role = guild.get_role(current_role_id)

            if desired_role:
                # üßπ Nejd≈ô√≠v odstran√≠me v≈°echny ostatn√≠ clan role (Leader, CoLeader, Elder/Admin)
                clan_role_ids = {1366106894816510062, 1366106931042975845, 1366106980732633118}

                for role in member.roles:
                    if role.id in clan_role_ids and role != desired_role:
                        try:
                            await member.remove_roles(role, reason="Aktualizace clan role")
                            print(f"‚ôªÔ∏è [RoleGiver] Odebr√°na star√° clan role {role.name} hr√°ƒçi {member.display_name}.")
                        except Exception as e:
                            print(f"‚ùå [RoleGiver] Chyba p≈ôi odeb√≠r√°n√≠ clan role {role.name}: {e}")

                # P≈ôid√°n√≠ spr√°vn√© role pokud ji je≈°tƒõ nem√°
                if desired_role not in member.roles:
                    try:
                        await member.add_roles(desired_role)
                        print(
                            f"‚úÖ [RoleGiver] P≈ôid√°na spr√°vn√° clan role {desired_role.name} hr√°ƒçi {member.display_name}.")
                    except Exception as e:
                        print(f"‚ùå [RoleGiver] Chyba p≈ôi p≈ôid√°v√°n√≠ clan role {desired_role.name}: {e}")
            else:
                print(f"‚ö†Ô∏è [RoleGiver] Clan role s ID {current_role_id} nebyla nalezena.")

        # === P≈ôid√°n√≠ ovƒõ≈ôen√© role ===
        if verified_role not in member.roles:
            try:
                await member.add_roles(verified_role)
                print(f"‚úÖ [RoleGiver] P≈ôid√°na role 'Ovƒõ≈ôen√Ω ƒçlen klanu' u≈æivateli {member.display_name}.")
            except Exception as e:
                print(f"‚ùå [RoleGiver] Chyba p≈ôi p≈ôid√°v√°n√≠ role ovƒõ≈ôen√©ho ƒçlena u≈æivateli {member.display_name}: {e}")

        # üè∞ === Nastaven√≠ TownHall role ===
        if townhall_level < 11:
            print(f"‚ö†Ô∏è [RoleGiver] {member.display_name} m√° TH{townhall_level}, co≈æ je pod limitem 11. P≈ôeskakuji.")
        else:
            th_role_id = TOWNHALL_ROLES.get(townhall_level)
            if th_role_id:
                th_role = guild.get_role(th_role_id)

                # üßπ Nejprve odstran√≠me v≈°echny existuj√≠c√≠ TH role (TH11, TH12, TH13, atd.)
                for role in member.roles:
                    if role.id in TOWNHALL_ROLES.values() and role != th_role:
                        try:
                            await member.remove_roles(role, reason="Aktualizace TownHall role")
                            print(
                                f"‚ôªÔ∏è [RoleGiver] Odebr√°na star√° TownHall role {role.name} hr√°ƒçi {member.display_name}.")
                        except Exception as e:
                            print(f"‚ùå [RoleGiver] Chyba p≈ôi odeb√≠r√°n√≠ TownHall role: {e}")

                # ‚úÖ P≈ôid√°me spr√°vnou TH roli
                if th_role and th_role not in member.roles:
                    try:
                        await member.add_roles(th_role)
                        print(f"‚úÖ [RoleGiver] P≈ôid√°na TH{townhall_level} role hr√°ƒçi {member.display_name}.")
                    except Exception as e:
                        print(f"‚ùå [RoleGiver] Chyba p≈ôi p≈ôid√°v√°n√≠ TH role: {e}")
            else:
                print(f"‚ö†Ô∏è [RoleGiver] Pro TH{townhall_level} nen√≠ definov√°na role.")


        # üèÜ === Nastaven√≠ League role ===
        # Z√≠sk√°me z√°kladn√≠ n√°zev ligy (jen prvn√≠ dvƒõ slova)
        base_league_name = " ".join(league_name.split()[:2])

        league_role_id = LEAGUE_ROLES.get(base_league_name)
        if league_role_id:
            league_role = guild.get_role(league_role_id)

            # üßπ Nejprve odstran√≠me v≈°echny existuj√≠c√≠ League role
            for role in member.roles:
                if role.id in LEAGUE_ROLES.values() and role != league_role:
                    try:
                        await member.remove_roles(role, reason="Aktualizace League role")
                        print(f"‚ôªÔ∏è [RoleGiver] Odebr√°na star√° League role {role.name} hr√°ƒçi {member.display_name}.")
                    except Exception as e:
                        print(f"‚ùå [RoleGiver] Chyba p≈ôi odeb√≠r√°n√≠ League role: {e}")

            # ‚úÖ P≈ôid√°me spr√°vnou ligovou roli
            if league_role and league_role not in member.roles:
                try:
                    await member.add_roles(league_role)
                    print(f"‚úÖ [RoleGiver] P≈ôid√°na liga {base_league_name} hr√°ƒçi {member.display_name}.")
                except Exception as e:
                    print(f"‚ùå [RoleGiver] Chyba p≈ôi p≈ôid√°v√°n√≠ League role: {e}")
        else:
            print(f"‚ö†Ô∏è [RoleGiver] Pro ligu {base_league_name} nen√≠ definov√°na role.")

        # üßπ ƒåi≈°tƒõn√≠ star√Ωch trofejov√Ωch rol√≠ bez ƒçlen≈Ø
        for role in guild.roles:
            if "Poh√°rk≈Ø" in role.name and len(role.members) == 0:
                try:
                    await role.delete(reason="ƒåi≈°tƒõn√≠ nevyu≈æ√≠van√Ωch trofejov√Ωch rol√≠")
                    print(f"üóëÔ∏è [RoleGiver] Smaz√°na neaktivn√≠ trofejov√° role: {role.name}")
                except discord.Forbidden:
                    print(f"‚ùå [RoleGiver] Nem√°m pr√°vo smazat roli: {role.name}")

        # === Spr√°va individu√°ln√≠ trofejov√© role ===
        # V≈ædy hled√°me, jestli existuje role s nov√Ωm jm√©nem
        new_trophies_name = f"‚Å£‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇüèÜ{trophies} Poh√°rk≈ØüèÜ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚Å£"
        existing_role = discord.utils.get(guild.roles, name=new_trophies_name)

        if existing_role:
            # Role existuje
            if existing_role not in member.roles:
                try:
                    await member.add_roles(existing_role)
                    print(f"‚úÖ [RoleGiver] P≈ôi≈ôazena existuj√≠c√≠ role {new_trophies_name} hr√°ƒçi {member.display_name}.")
                except discord.Forbidden:
                    print(f"‚ùå [RoleGiver] Nem√°m pr√°vo p≈ôi≈ôadit existuj√≠c√≠ roli {existing_role.name}.")
        else:
            # Role neexistuje -> vytvo≈ôit novou
            try:
                new_role = await guild.create_role(name=new_trophies_name, reason="Individu√°ln√≠ role pro trofeje")
                await member.add_roles(new_role)
                print(f"‚úÖ [RoleGiver] Vytvo≈ôena a p≈ôi≈ôazena nov√° role {new_trophies_name} hr√°ƒçi {member.display_name}.")
            except discord.Forbidden:
                print(f"‚ùå [RoleGiver] Nem√°m pr√°vo vytvo≈ôit roli {new_trophies_name} pro {member.display_name}.")

        # A nav√≠c, sma≈æeme starou trofejovou roli, pokud existuje a nen√≠ stejn√°
        trophies_role = next((r for r in member.roles if "Poh√°rk≈Ø" in r.name and r.name != new_trophies_name), None)
        if trophies_role:
            try:
                await member.remove_roles(trophies_role, reason="Nahrazen√≠ novou trofejovou rol√≠")
                print(f"‚ôªÔ∏è [RoleGiver] Odebr√°na star√° trofejov√° role {trophies_role.name} hr√°ƒçi {member.display_name}.")
            except discord.Forbidden:
                print(
                    f"‚ùå [RoleGiver] Nem√°m pr√°vo odebrat starou roli {trophies_role.name} hr√°ƒçi {member.display_name}.")
