import asyncio
import os
import sqlite3
from datetime import datetime, timedelta

import discord
from discord.ui import View, Button

# === Cesta k souboru datab√°ze ===
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "coc_data_info.sqlite3")

# === Pole, kter√° budeme ukl√°dat a sledovat pro zmƒõny ===
TRACKED_FIELDS = [
    "name", "tag", "role", "townHallLevel",
    "league", "trophies", "builderBaseLeague", "builderBaseTrophies",
    "clanRank", "previousClanRank",
    "donations", "donationsReceived"
]

IGNORED_FOR_CHANGES = ["donations", "donationsReceived"]

# === Funkce pro kontrolu existence datab√°ze ===
def database_exists() -> bool:
    """Zkontroluje, zda existuje soubor datab√°ze."""
    return os.path.exists(DB_PATH)

# === Funkce pro vytvo≈ôen√≠ nov√© datab√°ze ===
def create_database():
    """Vytvo≈ô√≠ novou SQLite datab√°zi s tabulkami clan_members, coc_links a clan_warnings."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute('''
                CREATE TABLE IF NOT EXISTS clan_members (
                    name TEXT,
                    tag TEXT PRIMARY KEY,
                    role TEXT,
                    townHallLevel INTEGER,
                    league TEXT,
                    trophies INTEGER,
                    builderBaseLeague TEXT,
                    builderBaseTrophies INTEGER,
                    clanRank INTEGER,
                    previousClanRank INTEGER,
                    donations INTEGER,
                    donationsReceived INTEGER
                )
            ''')
            c.execute('''
                CREATE TABLE IF NOT EXISTS coc_discord_links (
                    discord_name TEXT PRIMARY KEY,
                    coc_tag TEXT,
                    coc_name TEXT
                )
            ''')
            c.execute('''
                CREATE TABLE IF NOT EXISTS clan_warnings (
                    coc_tag TEXT,
                    date_time TEXT,
                    reason TEXT,
                    notified_at TEXT
                )
            ''')
            conn.commit()
            print("‚úÖ [database] Datab√°ze a tabulky vytvo≈ôeny.")
    except Exception as e:
        print(f"‚ùå [database] Chyba p≈ôi vytv√°≈ôen√≠ datab√°ze: {e}")

# === Ulo≈æ√≠ nebo aktualizuje hr√°ƒçe ===
def update_or_create_members(data: list[dict], bot=None):
    """
    Pro ka≈æd√Ω z√°znam ƒçlena:
    - Pokud je≈°tƒõ neexistuje v datab√°zi, p≈ôid√° ho
    - Pokud existuje, porovn√° zmƒõny a p≈ô√≠padnƒõ aktualizuje
    - Hl√°s√≠ zmƒõny, kromƒõ tƒõch, kter√© jsou ignorovan√©
    - Odstran√≠ ƒçleny, kte≈ô√≠ u≈æ v klanu nejsou
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()

            c.execute("SELECT tag FROM clan_members")
            existing_tags = {row[0] for row in c.fetchall()}
            incoming_tags = set()

            for member in data:
                try:
                    values = {
                        "name": member.get("name"),
                        "tag": member.get("tag"),
                        "role": member.get("role"),
                        "townHallLevel": member.get("townHallLevel"),
                        "league": member.get("league", {}).get("name", ""),
                        "trophies": member.get("trophies"),
                        "builderBaseLeague": member.get("builderBaseLeague", {}).get("name", ""),
                        "builderBaseTrophies": member.get("builderBaseTrophies"),
                        "clanRank": member.get("clanRank"),
                        "previousClanRank": member.get("previousClanRank"),
                        "donations": member.get("donations", 0),
                        "donationsReceived": member.get("donationsReceived", 0)
                    }

                    tag = values["tag"]
                    incoming_tags.add(tag)

                    c.execute("SELECT * FROM clan_members WHERE tag = ?", (tag,))
                    existing = c.fetchone()

                    if not existing:
                        c.execute("""
                            INSERT INTO clan_members VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, tuple(values.values()))

                        # Kr√°sn√© a detailn√≠ vyps√°n√≠ statistik
                        print(f"üÜï [database] P≈ôid√°n nov√Ω ƒçlen: {values['name']} ({tag})")
                        print("üìä Statistiky:")
                        print(f" ‚Ä¢ üè∞ TownHall Level: {values.get('townHallLevel', 'N/A')}")
                        print(f" ‚Ä¢ üèÖ League: {values.get('league', 'N/A')}")
                        print(f" ‚Ä¢ üèÜ Trofeje: {values.get('trophies', 'N/A')}")
                        print(f" ‚Ä¢ üî® Builder Base Trofeje: {values.get('builderBaseTrophies', 'N/A')}")
                        print(f" ‚Ä¢ üèÜ Clan Rank: {values.get('clanRank', 'N/A')}")
                        print(f" ‚Ä¢ ‚¨ÜÔ∏è Previous Clan Rank: {values.get('previousClanRank', 'N/A')}")
                        print(f" ‚Ä¢ üõ†Ô∏è Builder Base League: {values.get('builderBaseLeague', 'N/A')}")
                        print(f" ‚Ä¢ üëë Role v klanu: {values.get('role', 'N/A')}")
                    else:
                        changes = []
                        for i, key in enumerate(TRACKED_FIELDS):
                            if key in IGNORED_FOR_CHANGES:
                                continue
                            old_val = existing[i]
                            new_val = values[key]
                            if str(old_val) != str(new_val):
                                delta = ""
                                if isinstance(old_val, (int, float)) and isinstance(new_val, (int, float)):
                                    delta = f" ({int(new_val) - int(old_val):+})"
                                changes.append((key, old_val, new_val, delta))

                        if changes:
                            c.execute("""
                                UPDATE clan_members SET
                                    name = ?, tag = ?, role = ?, townHallLevel = ?,
                                    league = ?, trophies = ?, builderBaseLeague = ?, builderBaseTrophies = ?,
                                    clanRank = ?, previousClanRank = ?, donations = ?, donationsReceived = ?
                                WHERE tag = ?
                            """, (
                                values["name"], values["tag"], values["role"], values["townHallLevel"],
                                values["league"], values["trophies"], values["builderBaseLeague"], values["builderBaseTrophies"],
                                values["clanRank"], values["previousClanRank"], values["donations"], values["donationsReceived"],
                                tag
                            ))
                            print(f"‚ôªÔ∏è Zmƒõny u hr√°ƒçe {values['name']} ({tag}):")
                            for change in changes:
                                print(f"   - {change[0]} zmƒõna: {change[1]} ‚Üí {change[2]}{change[3]}")
                except Exception as member_error:
                    print(f"‚ùå [database] Chyba p≈ôi zpracov√°n√≠ ƒçlena: {member_error}")

            tags_to_remove = existing_tags - incoming_tags
            for tag in tags_to_remove:
                c.execute("DELETE FROM clan_members WHERE tag = ?", (tag,))
                print(f"üóëÔ∏è [database] Odebr√°n hr√°ƒç s tagem {tag} ‚Äì ji≈æ nen√≠ v klanu.")

                # Spus≈• √∫klid jen pokud je `bot` k dispozici
                if bot:
                    from member_tracker import cleanup_after_coc_departure
                    asyncio.create_task(cleanup_after_coc_departure(bot, tag))

    except Exception as e:
        print(f"‚ùå [database] Chyba p≈ôi z√°pisu do datab√°ze: {e}")

    conn.close()

# === Hlavn√≠ ≈ô√≠d√≠c√≠ funkce pro pr√°ci s datab√°z√≠ ===
def process_clan_data(data: list[dict], bot=None):
    """
    Univerz√°ln√≠ funkce pro zpracov√°n√≠ dat z API:
    - Zkontroluje, zda existuje datab√°ze
    - Pokud ne, vytvo≈ô√≠ ji
    - Pak provede aktualizace nebo z√°pis hr√°ƒç≈Ø
    """
    if not isinstance(data, list):
        print("‚ùå [database] Data nejsou ve spr√°vn√©m form√°tu: oƒçek√°v√°n seznam hr√°ƒç≈Ø.")
        return

    if not database_exists():
        print("üìÅ Datab√°ze neexistuje, bude vytvo≈ôena...")
        create_database()

    update_or_create_members(data, bot=bot)

def get_all_links():
    """
    Vr√°t√≠ z√°znam propojen√≠ mezi Discord ID a CoC √∫ƒçtem ve form√°tu:
    {discord_id: (coc_tag, coc_name)}

    Returns:
        dict: Slovn√≠k s propojen√≠mi, nebo pr√°zdn√Ω slovn√≠k p≈ôi chybƒõ
    """
    result = {}
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row  # Pro p≈ô√≠stup p≈ôes n√°zvy sloupc≈Ø
            cursor = conn.cursor()

            # Z√≠sk√°n√≠ v≈°ech propojen√≠ (p≈ôid√°n discord_id)
            cursor.execute("""
                SELECT discord_name, coc_tag, coc_name 
                FROM coc_discord_links
            """)

            for row in cursor.fetchall():
                result[int(row['discord_name'])] = (row['coc_tag'], row['coc_name'])


    except sqlite3.Error as e:
        print(f"‚ùå [DATABASE] Chyba p≈ôi ƒçten√≠ propojen√≠: {e}")

    return result

# === P≈ôid√°n√≠ propojen√≠ mezi Discord jm√©nem a CoC √∫ƒçtem ===
def add_coc_link(discord_name: str, coc_tag: str, coc_name: str):
    """
    P≈ôid√° propojen√≠ Discord u≈æivatele a Clash of Clans √∫ƒçtu.
    vstup: discord_name, coc_tag, coc_name
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT OR REPLACE INTO coc_discord_links (discord_name, coc_tag, coc_name)
                VALUES (?, ?, ?)
            """, (discord_name, coc_tag, coc_name))
            conn.commit()
            print(f"‚úÖ [database] Propojen√≠ ulo≈æeno pro {discord_name} ‚Üí {coc_tag} ({coc_name})")
    except Exception as e:
        print(f"‚ùå [database] Chyba p≈ôi ukl√°d√°n√≠ propojen√≠: {e}")

# === Odstranƒõn√≠ propojen√≠ podle Discord jm√©na ===
def remove_coc_link(discord_name: str):
    """
    Sma≈æe z√°znam propojen√≠ podle Discord jm√©na.
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("DELETE FROM coc_discord_links WHERE discord_name = ?", (discord_name,))
            conn.commit()
            conn.close()
            print(f"üóëÔ∏è [database] Propojen√≠ odstranƒõno pro Discord jm√©no: {discord_name}")
    except Exception as e:
        print(f"‚ùå [database] Chyba p≈ôi odstra≈àov√°n√≠ propojen√≠: {e}")

def get_all_members():
    """
    Vr√°t√≠ v≈°echny hr√°ƒçe z tabulky clan_members jako seznam slovn√≠k≈Ø.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT name, tag, role, townHallLevel, league, trophies, builderBaseTrophies, clanRank, previousClanRank, donations, donationsReceived, builderBaseLeague FROM clan_members")
    rows = cursor.fetchall()

    conn.close()

    members = []
    for row in rows:
        members.append({
            "name": row[0],
            "tag": row[1],
            "role": row[2],
            "townHallLevel": row[3],
            "league": row[4],
            "trophies": row[5],
            "builderBaseTrophies": row[6],
            "clanRank": row[7],
            "previousClanRank": row[8],
            "donations": row[9],
            "donationsReceived": row[10],
            "builderBaseLeague": row[11],
        })

    return members

# === Funkce pro v√Ωpis varov√°n√≠ ===
def fetch_warnings():
    """Vr√°t√≠ list[(tag, date_time, reason)] se≈ôazen√Ω jak je v DB."""
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("SELECT coc_tag, date_time, reason FROM clan_warnings")
        return c.fetchall()

# === Funkce pro odstranƒõn√≠ varov√°n√≠ ===
def remove_warning(coc_tag: str, date_time: str, reason: str):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                DELETE FROM clan_warnings WHERE coc_tag = ? AND date_time = ? AND reason = ?
            """, (coc_tag, date_time, reason))
            if c.rowcount > 0:
                print(f"üóëÔ∏è [warning] Varov√°n√≠ odstranƒõno: {coc_tag} ‚Äì {date_time} ‚Äì {reason}")
            else:
                print(f"‚ùå [warning] Varov√°n√≠ nenalezeno nebo neodpov√≠d√° parametr≈Øm.")
            conn.commit()
    except Exception as e:
        print(f"‚ùå [database] Chyba p≈ôi maz√°n√≠ varov√°n√≠: {e}")

async def cleanup_old_warnings():
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT coc_tag, date_time, reason FROM clan_warnings")
            rows = c.fetchall()

            for tag, date_time, reason in rows:
                try:
                    dt = datetime.strptime(date_time, "%d/%m/%Y %H:%M")
                    if (datetime.now() - dt).days > 14:
                        c.execute("DELETE FROM clan_warnings WHERE coc_tag = ? AND date_time = ? AND reason = ?", (tag, date_time, reason))
                        print(f"üßπ [cleanup] Odstranƒõno star√© varov√°n√≠: {tag} ‚Äì {date_time} ‚Äì {reason}")
                except Exception as e:
                    print(f"‚ùå [cleanup] Chyba p≈ôi parsov√°n√≠ ƒçasu: {date_time} ‚Äì {e}")
            conn.commit()
    except Exception as e:
        print(f"‚ùå [cleanup] Chyba p≈ôi ƒçi≈°tƒõn√≠ varov√°n√≠: {e}")

# === Posl√°n√≠ varov√°n√≠ jako zpr√°vu na Discord ===
class WarningReviewView(View):
    def __init__(self, coc_tag: str, coc_name: str, date_time: str, reason: str):
        super().__init__(timeout=None)
        self.coc_tag = coc_tag
        self.member_name = coc_name
        self.date_time = date_time
        self.reason = reason

    @discord.ui.button(label="‚úÖ Potvrdit", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: Button):
        try:
            # Z√≠sk√°n√≠ jm√©na z clan_members
            member_name = None
            all_members = get_all_members()
            for member in all_members:
                if member["tag"].upper() == self.coc_tag.upper():
                    member_name = member["name"]
                    break

            # Ulo≈æen√≠ varov√°n√≠
            with sqlite3.connect(DB_PATH) as conn:
                c = conn.cursor()
                c.execute("""
                    INSERT INTO clan_warnings (coc_tag, date_time, reason, notified_at)
                    VALUES (?, ?, ?, NULL)
                """, (self.coc_tag, self.date_time, self.reason))
                conn.commit()

            await interaction.message.delete()

            # Sestav z√°kladn√≠ zpr√°vu
            tag_line = f"**{self.coc_tag}**"
            if self.member_name:
                tag_line += f" ({self.member_name})"

            msg = (
                f"‚úÖ {interaction.user.mention} potvrdil varov√°n√≠ pro {tag_line}\n"
                f"üìÜ {self.date_time}\n"
                f"üìù {self.reason}"
            )

            # Pou≈æij get_all_links() m√≠sto SQL dotazu
            all_links = get_all_links()
            for discord_id, (tag, _) in all_links.items():
                if tag.upper() == self.coc_tag.upper():
                    user = await interaction.client.fetch_user(discord_id)
                    if user:
                        try:
                            await user.send(
                                f"‚ö†Ô∏è Dostal jsi varov√°n√≠ ‚ö†Ô∏è.\n"
                                f"üë§ Clash of Clans tag: `{self.coc_tag}` ({self.member_name})\n"
                                f"üìÜ {self.date_time}\n"
                                f"üìù D≈Øvod: {self.reason}"
                            )
                            msg += "\nüì© Hr√°ƒç je na Discordu, DM zpr√°va byla odesl√°na."
                        except Exception as dm_error:
                            msg += "\n‚ö†Ô∏è Nepoda≈ôilo se odeslat DM zpr√°vu hr√°ƒçi."
                            print(f"‚ö†Ô∏è [confirm] DM error: {dm_error}")
                    break  # u≈æ jsme na≈°li odpov√≠daj√≠c√≠ tag

            # Po≈°leme log zpr√°vu
            log_channel = interaction.channel
            await log_channel.send(msg)

            print(
                f"‚úÖ [review] {interaction.user.name} ({interaction.user.id}) potvrdil varov√°n√≠: {self.coc_tag} ‚Äì {self.reason}"
            )

        except Exception as e:
            await interaction.followup.send(
                f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ varov√°n√≠: {e}", ephemeral=True
            )
            print(f"‚ùå [review] Chyba p≈ôi potvrzen√≠ varov√°n√≠ {self.coc_tag}: {e}")

    @discord.ui.button(label="‚ùå Zru≈°it", style=discord.ButtonStyle.red)
    async def reject(self, interaction: discord.Interaction, button: Button):
        await interaction.message.delete()

        log_channel = interaction.channel
        await log_channel.send(
            f"‚ùå {interaction.user.mention} zam√≠tl varov√°n√≠ pro **{self.coc_tag}**\n"
            f"üìÜ {self.date_time}\nüìù {self.reason}"
        )

        print(
            f"‚ùå [review] {interaction.user.name} ({interaction.user.id}) zam√≠tl varov√°n√≠: {self.coc_tag} ‚Äì {self.reason}")

# === Upozornƒõn√≠ p≈ôi 3+ varov√°n√≠ch a ozn√°men√≠ na Discord ===
async def notify_warnings_exceed(bot: discord.Client):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT coc_tag, COUNT(*) FROM clan_warnings GROUP BY coc_tag HAVING COUNT(*) >= 3")
            tags = c.fetchall()

            for tag, count in tags:
                # Zjisti posledn√≠ notified_at
                c.execute("SELECT MAX(notified_at) FROM clan_warnings WHERE coc_tag = ?", (tag,))
                last_notified = c.fetchone()[0]
                recent_warnings = []

                if last_notified:
                    try:
                        last_dt = datetime.strptime(last_notified, "%d/%m/%Y %H:%M")
                        c.execute("SELECT date_time, reason FROM clan_warnings WHERE coc_tag = ?", (tag,))
                        all = c.fetchall()
                        recent_warnings = [
                            (dt, reason) for (dt, reason) in all
                            if datetime.strptime(dt, "%d/%m/%Y %H:%M") > last_dt
                        ]
                        if not recent_warnings:
                            continue  # nic nov√©ho
                    except Exception as e:
                        print(f"‚ö†Ô∏è [notify] Chyba p≈ôi porovn√°v√°n√≠ ƒçasu pro {tag}: {e}")
                        continue
                else:
                    # pokud ≈æ√°dn√Ω notified_at je≈°tƒõ nikdy nebyl
                    c.execute("SELECT date_time, reason FROM clan_warnings WHERE coc_tag = ?", (tag,))
                    recent_warnings = c.fetchall()

                # naƒçti jm√©no
                c.execute("SELECT coc_name, discord_name FROM coc_discord_links WHERE coc_tag = ?", (tag,))
                result = c.fetchone()
                if result:
                    coc_name = result[0]
                    discord_mention = f"<@{result[1]}>" if result[1] else coc_name
                else:
                    c.execute("SELECT name FROM clan_members WHERE tag = ?", (tag,))
                    name_row = c.fetchone()
                    coc_name = name_row[0] if name_row else "Nezn√°m√Ω hr√°ƒç"
                    discord_mention = f"@{coc_name}"

                channel = bot.get_channel(1371105995270393867)
                if channel:
                    msg = (
                            f"<@317724566426222592>\n"
                            f"**{tag}**\n"
                            f"{discord_mention}\n"
                            + "\n".join([f"{i + 1}. {dt} ‚Äì {reason}" for i, (dt, reason) in enumerate(recent_warnings)])
                    )
                    await channel.send(msg)
                    print(f"üì£ [notify] Nov√° notifikace pro {tag} ‚Äì {len(recent_warnings)} nov√Ωch varov√°n√≠.")

                    now = datetime.now().strftime("%d/%m/%Y %H:%M")
                    c.execute("UPDATE clan_warnings SET notified_at = ? WHERE coc_tag = ?", (now, tag))
                    conn.commit()

    except Exception as e:
        print(f"‚ùå [notify] Chyba p≈ôi notifikaci o v√≠cen√°sobn√Ωch varov√°n√≠ch: {e}")

# === Rychl√© upozornƒõn√≠ na nov√© varov√°n√≠ ===
async def notify_single_warning(bot: discord.Client, coc_tag: str, date_time: str, reason: str):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT name FROM clan_members WHERE tag = ?", (coc_tag,))
            result = c.fetchone()
            name = result[0] if result else "Nezn√°m√Ω hr√°ƒç"

        channel = bot.get_channel(1371105995270393867)
        if channel:
            msg = f"{coc_tag}\n@{name}\n{date_time}\n{reason}"
            view = WarningReviewView(coc_tag, name, date_time, reason)
            await channel.send(msg, view=view)
            print(f"üì£ [notify] N√°vrh na varov√°n√≠ odesl√°n pro {coc_tag}.")
    except Exception as e:
        print(f"‚ùå [notify] Chyba p≈ôi pos√≠l√°n√≠ jednoho varov√°n√≠: {e}")