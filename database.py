import os
import json
import sqlite3

# === Cesta k souboru datab√°ze ===
DB_PATH = "coc_data_info.sqlite3"

# === Pole, kter√° budeme ukl√°dat a sledovat pro zmƒõny ===
TRACKED_FIELDS = [
    "tag", "name", "role", "townHallLevel",
    "league", "trophies", "builderBaseTrophies",
    "clanRank", "previousClanRank",
    "donations", "donationsReceived", "builderBaseLeague"
]

IGNORED_FOR_CHANGES = ["donations", "donationsReceived"]

# === Funkce pro kontrolu existence datab√°ze ===
def database_exists() -> bool:
    """Zkontroluje, zda existuje soubor datab√°ze."""
    return os.path.exists(DB_PATH)

# === Funkce pro vytvo≈ôen√≠ nov√© datab√°ze ===
def create_database():
    """Vytvo≈ô√≠ novou SQLite datab√°zi s tabulkou clan_members."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute('''
                CREATE TABLE IF NOT EXISTS clan_members (
                    tag TEXT PRIMARY KEY,
                    name TEXT,
                    role TEXT,
                    townHallLevel INTEGER,
                    league TEXT,
                    trophies INTEGER,
                    builderBaseTrophies INTEGER,
                    clanRank INTEGER,
                    previousClanRank INTEGER,
                    donations INTEGER,
                    donationsReceived INTEGER,
                    builderBaseLeague TEXT
                )
            ''')
            conn.commit()
            print("‚úÖ Datab√°ze vytvo≈ôena.")
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ datab√°ze: {e}")

# === Ulo≈æ√≠ nebo aktualizuje hr√°ƒçe ===
def update_or_create_members(data: list[dict]):
    """
    Pro ka≈æd√Ω z√°znam ƒçlena:
    - Pokud je≈°tƒõ neexistuje v datab√°zi, p≈ôid√° ho
    - Pokud existuje, porovn√° zmƒõny a p≈ô√≠padnƒõ aktualizuje
    - Hl√°s√≠ zmƒõny, kromƒõ tƒõch, kter√© jsou ignorovan√©
    """
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()

            # Naƒçten√≠ v≈°ech existuj√≠c√≠ch tag≈Ø p≈ôed zpracov√°n√≠m
            c.execute("SELECT tag FROM clan_members")
            existing_tags = {row[0] for row in c.fetchall()}
            incoming_tags = set()

            for member in data:
                try:
                    # P≈ôedzpracov√°n√≠ hodnot a o≈°et≈ôen√≠ chybƒõj√≠c√≠ch pol√≠
                    values = {
                        "tag": member.get("tag"),
                        "name": member.get("name"),
                        "role": member.get("role"),
                        "townHallLevel": member.get("townHallLevel"),
                        "league": member.get("league", {}).get("name", ""),
                        "trophies": member.get("trophies"),
                        "builderBaseTrophies": member.get("builderBaseTrophies"),
                        "clanRank": member.get("clanRank"),
                        "previousClanRank": member.get("previousClanRank"),
                        "donations": member.get("donations", 0),
                        "donationsReceived": member.get("donationsReceived", 0),
                        "builderBaseLeague": member.get("builderBaseLeague", {}).get("name", "")
                    }

                    tag = values["tag"]
                    incoming_tags.add(tag)

                    # Z√≠sk√°n√≠ p≈ôedchoz√≠ch dat
                    c.execute("SELECT * FROM clan_members WHERE tag = ?", (tag,))
                    existing = c.fetchone()

                    if not existing:
                        # Nov√Ω z√°znam
                        c.execute("""
                            INSERT INTO clan_members VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, tuple(values.values()))
                        print(f"üÜï P≈ôid√°n nov√Ω ƒçlen: {values['name']} ({tag})")
                    else:
                        # Porovn√°n√≠ hodnot a aktualizace
                        changes = []
                        for i, key in enumerate(TRACKED_FIELDS):
                            if key in IGNORED_FOR_CHANGES:
                                continue
                            old_val = existing[i]
                            new_val = values[key]
                            if str(old_val) != str(new_val):
                                changes.append((key, old_val, new_val))

                        if changes:
                            c.execute("""
                                UPDATE clan_members SET
                                    name = ?, role = ?, townHallLevel = ?, league = ?,
                                    trophies = ?, builderBaseTrophies = ?, clanRank = ?, previousClanRank = ?,
                                    donations = ?, donationsReceived = ?, builderBaseLeague = ?
                                WHERE tag = ?
                            """, (
                                values["name"], values["role"], values["townHallLevel"], values["league"],
                                values["trophies"], values["builderBaseTrophies"], values["clanRank"], values["previousClanRank"],
                                values["donations"], values["donationsReceived"], values["builderBaseLeague"], tag
                            ))
                            print(f"‚ôªÔ∏è Zmƒõny u hr√°ƒçe {values['name']} ({tag}):")
                            for change in changes:
                                print(f"   - {change[0]} zmƒõna: {change[1]} ‚Üí {change[2]}")
                except Exception as member_error:
                    print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ ƒçlena: {member_error}")

            # Odstranƒõn√≠ hr√°ƒç≈Ø, kte≈ô√≠ ji≈æ nejsou v klanu
            tags_to_remove = existing_tags - incoming_tags
            for tag in tags_to_remove:
                c.execute("DELETE FROM clan_members WHERE tag = ?", (tag,))
                print(f"üóëÔ∏è Odebr√°n hr√°ƒç s tagem {tag} ‚Äì ji≈æ nen√≠ v klanu.")

    except Exception as e:
        print(f"‚ùå Chyba p≈ôi z√°pisu do datab√°ze: {e}")

# === Hlavn√≠ ≈ô√≠d√≠c√≠ funkce pro pr√°ci s datab√°z√≠ ===
def process_clan_data(data: list[dict]):
    """
    Univerz√°ln√≠ funkce pro zpracov√°n√≠ dat z API:
    - Zkontroluje, zda existuje datab√°ze
    - Pokud ne, vytvo≈ô√≠ ji
    - Pak provede aktualizace nebo z√°pis hr√°ƒç≈Ø
    """
    if not isinstance(data, list):
        print("‚ùå Data nejsou ve spr√°vn√©m form√°tu: oƒçek√°v√°n seznam hr√°ƒç≈Ø.")
        return

    if not database_exists():
        print("üìÅ Datab√°ze neexistuje, bude vytvo≈ôena...")
        create_database()

    update_or_create_members(data)